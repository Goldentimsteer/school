///////////////////////////////////////////////////////////////////////////////
//                   
// Author:           TImothy Lockhart
// Email:            tlockhartjr@icloud.com
// Label:            HO1
// Title:            Array Based Stack Example
// Course:           2143
// Semester:         Fall 2020
//
// Description:
//       Example implementation of an array based stack that holds integers.
//
// Usage:
//       Nothing special right now.
//
// Files:            
//       None
/////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

/**
 * Stack
 *
 * Description:
 *      Integer array based stack implementation
 *
 * Public Methods:
 *      - Stack()
 *      - Stack(int)
 *      - void Push()
 *      - int Pop()
 *      - bool empty()
 *      - bool full()
 *      - void Print()
 *
 * Private Methods:
 *      - None
 *
 * Usage:
 *
 *  Stack S;
 *  S.Push(80);
 *  S.Push(90);
 *  S.Print();
 *  int x = S.Pop();
 *
 */
class Stack {
private:
    int* S;       //array pointer
    int* A;
    int capacity; //max stack size
    int top;      //current top (index)
    int size;     //current num items
    int Asize;    //how many numbers are in the array
public:
    /**
     * Stack:
     *    Constructor.
     * Params:
     *    void
     *
     * Returns:
     *     Void
     */
    Stack() {
        capacity = 10;          // set array size
        S = new int[capacity];  // allocate new memory
        top = -1;               // initialize top of stack
        size = 0;               // set stack to empty
        Asize = 0;              // set the size to zero
    }

    /**
     * Stack:
     *    Constructor.
     * Params:
     *    int : capacity
     *
     * Returns:
     *     Void
     */
    Stack(int cap) {
        capacity = cap;         // set array size      
        S = new int[capacity];  // allocate new memory
        top = -1;               // initialize top of stack
        size = 0;               // set stack to empty
        Asize = 0;              // set size to zero
    }

    /**
     * Push:
     *    Push item onto stack.
     * Params:
     *    int : data
     *
     * Returns:
     *     Void
     */
    void Push(int data) {
        top++;              // move top of stack up
        size++;             // increment size
        Full();
        S[top] = data;      // add item to array
        Asize++;


    }

    /**
     * Pop:
     *    remove item from stack.
     * Params:
     *    void
     *
     * Returns:
     *     void
     */
    void Pop() {
        Asize--;
        Empty();

        top--;              // shrink the stack
        size--;             // update our size



    }

    /**
     * Empty:
     *    is the stack empty?
     * Params:
     *    void
     *
     * Returns:
     *     int
     */
    int Empty() {
        if (Asize == 0)
        {

            return 0;
            cout << "the stack is empty" << endl;
        }

        else
        {
            cout << "poped a ";
            int data = S[top];  // pull item from stack  
            cout << data << endl;
            return data;

        }
    }

    /**
     * Full:
     *    is the stack full?
     * Params:
     *    void
     *
     * Returns:
     *
     */
    void Full() {
        if (Asize >= capacity)
            capacity = capacity * 2;        // double the previous size
        int* temp = new int[capacity];      // create new bigger array.
        for (int i = 0; i < Asize; i++)
        {
            temp[i] = A[i];                 // copy values to new array.
        }
        delete[] A;                         // free old array memory.
        A = temp;                           // now a points to new array.
    }

    /**
     * Print:
     *    Used so we can inspect our stack.
     * Params:
     *    void
     *
     * Returns:
     *     void
     */
    void Print() {
        for (int i = top; i >= 0; i--) {
            cout << S[i] << endl;
        }


    }

    /**
     * Overloaded ostream <<
     *    Lets us print a stack using cout
     * Params:
     *    ostream &os   : instance of ostream passed in by reference
     *    const Stack   : instance of stack passed in using const so
     *                    it cannot be changed
     *
     * Returns:
     *     ostream
     */
    friend ostream& operator<<(ostream& os, const Stack s) {
        for (int i = s.top; i >= 0; i--) {
            os << s.S[i] << endl;
        }
        return os;
    }
};







int main()
{
    Stack S1;           // calls default constructor
    //Stack S2(25);       // calls overloaded constructor


    ifstream fin;
    string command;
    int value;


    fin.open("input.txt");
    while (!fin.eof())
    {
        fin >> command;           // read push or pop  
        cout << command << " ";


        if (command == "push")
        {  // if command is a push we need
            fin >> value;         // to read a value in as well
            cout << value;
            S1.Push(value);

        }

        cout << endl;

    }


    S1.Print();








}

